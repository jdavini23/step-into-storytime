// Centralized API abstraction for subscription management
import type { Product, Price, SubscriptionStatus } from '@/contexts/subscription-context';
import { createSupabaseClient } from '@/lib/supabase';

export async function fetchSubscription() {
  // TODO: Implement fetch logic
}

export async function switchPlan(productId: string) {
  // TODO: Implement plan switching logic
}

export async function cancelSubscription() {
  // TODO: Implement cancellation logic
}

/**
 * Fetches the number of stories generated by the user in the current billing period.
 * @param userId - The user's ID
 * @param periodStart - ISO string for the start of the billing period
 * @param periodEnd - ISO string for the end of the billing period
 * @returns { used: number }
 */
export async function fetchStoryUsage(userId: string, periodStart?: string, periodEnd?: string): Promise<{ used: number }> {
  try {
    const supabase = createSupabaseClient();
    let query = supabase
      .from('stories')
      .select('id', { count: 'exact', head: true })
      .eq('user_id', userId);
    if (periodStart) {
      query = query.gte('created_at', periodStart);
    }
    if (periodEnd) {
      query = query.lt('created_at', periodEnd);
    }
    const { count, error } = await query;
    if (error) throw error;
    return { used: count ?? 0 };
  } catch (err) {
    console.error('[fetchStoryUsage] Error:', err);
    return { used: 0 };
  }
}

// Add more API functions as needed
